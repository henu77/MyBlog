<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.malong.blog.dao.BlogsMapper">
    <resultMap id="blogMap" type="blog">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="views" property="views"/>
        <result column="flag" property="flag"/>
        <result column="content" property="content"/>
        <result column="first_picture" property="firstPicture"/>
        <result column="published" property="published"/>
        <result column="recommend" property="recommend"/>
        <result column="create_time" property="creatTime"/>
        <result column="update_time" property="updateTime"/>
        <association property="typeId" column="type_id" select="getType"/>
        <association property="userId" column="user_id" select="getUserInfoById"/>
    </resultMap>

    <resultMap id="typeMap" type="type">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
    </resultMap>

    <resultMap id="userInfoMap" type="userInfo">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
    </resultMap>
    <select id="getBlogsByLimit" resultMap="blogMap">
        select id,
               title,
               type_id,
               user_id,
               published,
               create_time,
               update_time
        from myblog.t_blog
        order by id
        limit #{startIndex},#{pageSize};
    </select>
    <select id="getBlogsByLimitForFont" resultMap="blogMap">
        select id,
               title,
               flag,
               content,
               views,
               first_picture,
               recommend,
               type_id,
               user_id,
               create_time,
               update_time
        from myblog.t_blog
        where published = true
        order by recommend desc, update_time desc
        limit #{startIndex},#{pageSize};
    </select>

    <select id="getBlogsByLimitByTitle" resultMap="blogMap">
        select id,
               title,
               views,
               published,
               type_id,
               user_id,
               create_time,
               update_time
        from myblog.t_blog
        where title like concat('%', #{title}, '%')
        order by id
        limit #{startIndex},#{pageSize};
    </select>

    <!-- 基于用户还是需要用联查 -->
    <select id="getBlogsByLimitByUser" resultMap="blogMap">
        select blog.id as id,
               title,
               views,
               published,
               type_id,
               user_id,
               create_time,
               update_time
        from myblog.t_blog blog,
             myblog.t_user user
        where blog.user_id = user.id
          and user.username = #{username}
        order by id
        limit #{startIndex},#{pageSize};
    </select>

    <select id="getBlogsByLimitByTitleAndUser" resultMap="blogMap">
        select blog.id as id,
               title,
               views,
               type_id,
               published,
               user_id,
               create_time,
               update_time
        from myblog.t_blog blog,
             myblog.t_user user
        where title like '%${title}%'
          and user.username = #{username}
          and blog.user_id = user.id
        order by id
        limit #{startIndex},#{pageSize};
    </select>

    <select id="getUserInfoById" resultType="userInfo">
        select *
        from myblog.t_user
        where id = #{id};
    </select>

    <select id="getType" resultType="type">
        select *
        from myblog.t_type
        where id = #{typeId};
    </select>
    <select id="getBlogById" resultMap="detailsBlog">
        select *
        from myblog.t_blog
        where id = #{id};
    </select>
    <resultMap id="detailsBlog" type="blog">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="first_picture" property="firstPicture"/>
        <result column="flag" property="flag"/>
        <result column="views" property="views"/>
        <result column="appreciation" property="appreciation"/>
        <result column="commentable" property="commentable"/>
        <result column="published" property="published"/>
        <result column="recommend" property="recommend"/>
        <result column="create_time" property="creatTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="description" property="description"/>
        <association property="typeId" column="type_id" select="getType"/>
        <association property="userId" column="user_id" select="getUserInfoById"/>
    </resultMap>
    <select id="countAllBlogs" resultType="int">
        select count(id)
        from myblog.t_blog
        where published = true;
    </select>
    <select id="getAuthorByBlogId" resultType="int" parameterType="int">
        select user_id
        from myblog.t_blog
        where id = #{id};
    </select>
    <insert id="saveBlog" parameterType="blog">
        insert into myblog.t_blog(title, content, first_picture, flag,
                                  views, appreciation,
                                  commentabled, published, recommend,
                                  create_time, update_time, description,
                                  type_id, user_id)
        values (#{title}, #{content}, #{firstPicture}, #{flag},
                #{views}, #{appreciation},
                #{commentabled}, #{published}, #{recommend},
                #{creatTime}, #{updateTime}, #{description},
                #{typeId.id}, #{userId.id});
    </insert>
    <update id="addViews" parameterType="int">
        update myblog.t_blog
        set views = views + 1
        where id = #{id};
    </update>
    <delete id="removeBlogById" parameterType="int">
        delete
        from myblog.t_blog
        where id = #{id};
    </delete>
</mapper>